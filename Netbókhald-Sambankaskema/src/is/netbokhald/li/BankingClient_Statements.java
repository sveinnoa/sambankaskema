
package is.netbokhald.li;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.handler.WSHandlerConstants;

/**
 * This class was generated by Apache CXF 2.7.2
 * 2013-04-08T14:08:14.012Z
 * Generated source version: 2.7.2
 * 
 */
public final class BankingClient_Statements {

    private static final QName SERVICE_NAME = new QName("http://IcelandicOnlineBanking/2005/12/01/Statements", "IcelandicOnlineBankingStatementsService");

    private BankingClient_Statements() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = IcelandicOnlineBankingStatementsService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        IcelandicOnlineBankingStatementsService ss = new IcelandicOnlineBankingStatementsService(wsdlURL, SERVICE_NAME);
        IcelandicOnlineBankingStatementsSoap port = ss.getIcelandicOnlineBankingStatementsSoap();  
        
        // http://cxf.apache.org/docs/ws-security.html
        org.apache.cxf.endpoint.Client client = ClientProxy.getClient(port);
        org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();
               
        // how to configure the incoming handler       
        Map<String,Object> inProps= new HashMap<String,Object>();
        
        // add the incoming handler
        WSS4JInInterceptor wssIn = new WSS4JInInterceptor(inProps);
        cxfEndpoint.getInInterceptors().add(wssIn);

        // how to configure the outgoing handler
        Map<String,Object> outProps = new HashMap<String,Object>();
        outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN);
                
        // Callback used to retrieve password for given user.
        outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());        
        outProps.put(WSHandlerConstants.ACTION, "Signature");
        outProps.put(WSHandlerConstants.USER, "myAlias");
        outProps.put(WSHandlerConstants.SIG_PROP_FILE, "client_sign.properties");

        // add the outgoing handler
        WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
//        cxfEndpoint.getOutInterceptors().add(wssOut);
        
        {
        System.out.println("Invoking getCurrencyRates...");
        is.netbokhald.li.CurrencyRateRequest _getCurrencyRates_parameters = new is.netbokhald.li.CurrencyRateRequest();
        is.netbokhald.li.CurrencyType _getCurrencyRates_parametersCurrencyType = is.netbokhald.li.CurrencyType.EXCHANGE_RATE;
        _getCurrencyRates_parameters.setCurrencyType(_getCurrencyRates_parametersCurrencyType);
        _getCurrencyRates_parameters.setDate(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-04-08T14:08:14.064Z"));
        is.netbokhald.li.CurrencyRateResponse _getCurrencyRates__return = port.getCurrencyRates(_getCurrencyRates_parameters);
        System.out.println("getCurrencyRates.result=" + _getCurrencyRates__return);


        }
        {
        System.out.println("Invoking getAccountStatement...");
        is.netbokhald.li.AccountStatement _getAccountStatement_accountStatement = new is.netbokhald.li.AccountStatement();
        _getAccountStatement_accountStatement.setAccount("Account-835381730");
        _getAccountStatement_accountStatement.setDateFrom(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-04-08T14:08:14.071Z"));
        _getAccountStatement_accountStatement.setDateTo(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-04-08T14:08:14.071Z"));
        _getAccountStatement_accountStatement.setRecordFrom(Long.valueOf(-2677258303406614093l));
        _getAccountStatement_accountStatement.setRecordTo(Long.valueOf(-6253485640604828634l));
        is.netbokhald.li.AccountStatementResponse _getAccountStatement__return = port.getAccountStatement(_getAccountStatement_accountStatement);
        System.out.println("getAccountStatement.result=" + _getAccountStatement__return);


        }

        System.exit(0);
    }

}
