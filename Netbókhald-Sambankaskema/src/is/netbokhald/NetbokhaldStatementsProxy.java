
package is.netbokhald;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import is.netbokhald.li.AccountStatement;
import is.netbokhald.li.AccountStatementResponse;
import is.netbokhald.li.ClientPasswordCallback;
import is.netbokhald.li.CurrencyRateRequest;
import is.netbokhald.li.CurrencyRateResponse;
import is.netbokhald.li.IcelandicOnlineBankingStatementsService;
import is.netbokhald.li.IcelandicOnlineBankingStatementsSoap;

import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.xml.namespace.QName;

import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;

/**
 * This class was generated by Apache CXF 2.7.2
 * 2013-04-08T14:08:14.012Z
 * Generated source version: 2.7.2
 * 
 */
public final class NetbokhaldStatementsProxy {

    private static final QName SERVICE_NAME = new QName("http://IcelandicOnlineBanking/2005/12/01/Statements", "IcelandicOnlineBankingStatementsService");
    private static IcelandicOnlineBankingStatementsSoap webservice;

    private NetbokhaldStatementsProxy() {
        URL wsdlURL = IcelandicOnlineBankingStatementsService.WSDL_LOCATION;

        IcelandicOnlineBankingStatementsService ss = new IcelandicOnlineBankingStatementsService(wsdlURL, SERVICE_NAME);
        webservice = ss.getIcelandicOnlineBankingStatementsSoap();  
        
        // http://cxf.apache.org/docs/ws-security.html
        org.apache.cxf.endpoint.Client client = ClientProxy.getClient(webservice);
        org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();
               
        // how to configure the incoming handler       
        Map<String,Object> inProps= new HashMap<String,Object>();
        
        // add the incoming handler
        WSS4JInInterceptor wssIn = new WSS4JInInterceptor(inProps);
        // Callback used to retrieve password for given user.
        inProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());        
//        cxfEndpoint.getInInterceptors().add(wssIn);

        // how to configure the outgoing handler
        Map<String,Object> outProps = new HashMap<String,Object>();
        outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN);
        outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());                        
        outProps.put(WSHandlerConstants.USER, "L5801740439B2B");
//        outProps.put(WSHandlerConstants.ACTION, "Signature");
//        outProps.put(WSHandlerConstants.SIG_PROP_FILE, "client_sign.properties");

        // add the outgoing handler
        WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
        cxfEndpoint.getOutInterceptors().add(wssOut);
    }


	private AccountStatementResponse getAccountStatement(AccountStatement accountStatement) {
		return webservice.getAccountStatement(accountStatement);
	}

	private CurrencyRateResponse getCurrencyRates(CurrencyRateRequest parameters) {
		return webservice.getCurrencyRates(parameters);
	}

    public static void main(String args[]) throws java.lang.Exception {
    	NetbokhaldStatementsProxy statementsProxy = new NetbokhaldStatementsProxy();
/*    	
        {
        System.out.println("Invoking getCurrencyRates...");
        is.netbokhald.li.CurrencyRateRequest _getCurrencyRates_parameters = new is.netbokhald.li.CurrencyRateRequest();
        is.netbokhald.li.CurrencyType _getCurrencyRates_parametersCurrencyType = is.netbokhald.li.CurrencyType.EXCHANGE_RATE;
        _getCurrencyRates_parameters.setCurrencyType(_getCurrencyRates_parametersCurrencyType);
        _getCurrencyRates_parameters.setDate(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-04-08T14:08:14.064Z"));
        is.netbokhald.li.CurrencyRateResponse _getCurrencyRates__return = statementsProxy.getCurrencyRates(_getCurrencyRates_parameters);
        System.out.println("getCurrencyRates.result=" + _getCurrencyRates__return);


        }
*/
    	{
        System.out.println("Invoking getAccountStatement...");
        is.netbokhald.li.AccountStatement _getAccountStatement_accountStatement = new is.netbokhald.li.AccountStatement();
        _getAccountStatement_accountStatement.setAccount("525265880");
        _getAccountStatement_accountStatement.setDateFrom(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-09-08T14:08:14.071Z"));
        _getAccountStatement_accountStatement.setDateTo(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-09-09T14:08:14.071Z"));
        _getAccountStatement_accountStatement.setRecordFrom(Long.valueOf(1));
        _getAccountStatement_accountStatement.setRecordTo(Long.valueOf(10));
        is.netbokhald.li.AccountStatementResponse _getAccountStatement__return = statementsProxy.getAccountStatement(_getAccountStatement_accountStatement);
        System.out.println("getAccountStatement.result=" + _getAccountStatement__return);


        }

        System.exit(0);
    }

}
